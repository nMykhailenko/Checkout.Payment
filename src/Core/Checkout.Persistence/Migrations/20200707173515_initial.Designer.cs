// <auto-generated />
using System;
using Checkout.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Checkout.Persistence.Migrations
{
    [DbContext(typeof(CheckoutDbContext))]
    [Migration("20200707173515_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Checkout.Domain.Entitities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Checkout.Domain.Entitities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankRequestId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedUTCDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestId")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Checkout.Domain.Entitities.Payment", b =>
                {
                    b.OwnsOne("Checkout.Domain.ValueObjects.CardInformation", "CardInformation", b1 =>
                        {
                            b1.Property<long>("PaymentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("CardHolder")
                                .HasColumnType("text");

                            b1.Property<string>("CardNumber")
                                .HasColumnType("text");

                            b1.Property<string>("MaskedCardNumber")
                                .HasColumnType("text");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });
                });

            modelBuilder.Entity("Checkout.Domain.Entitities.Transaction", b =>
                {
                    b.HasOne("Checkout.Domain.Entitities.Payment", "Payment")
                        .WithOne("Transaction")
                        .HasForeignKey("Checkout.Domain.Entitities.Transaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
